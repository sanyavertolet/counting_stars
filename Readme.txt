Дорогие студенты

Это репозиторий для выполнения заданий практикума.

интерисующие вас команды:

 git commit -- внести изменение в репозиторий
 git add    -- добавить новый файл в репозиторий
 git rm     -- удалить не нужный файл из репозитория
 git push   -- отправить все локальные изменения на сервер
 git pull   -- скачать обновлённую версию репозитория
 git log    -- посмотреть информацию о внесённых измениния в репозиторий
 git diff   -- посмотреть разницу между двумя конкретными состояниями (изменениям, ревизиям) в репозитории.
 git status -- показывает состояние вашей локальной копии репозитория.

соответствующая комнда для чтения  man на "git команду" будет выглядеть следующим образом:
 man git-commit

Перед использованием этого репозитория не забудьте выполнить 2 команды:

   git config --global user.name "Your Name"
   git config --global user.email you@example.com

Для тех, кто освоится.
 git chechout -- переводит состояние репозитория к нужной ревизии
 git rebase   -- упражнения с редактированием порядка записей в репозитории и удаления ненужных ревизий.
 git branch   -- "магия" c ветками.
 git blame    -- поиск коммита  (ревизии) к строчке
 git tag      -- для тех, кто хочет делать релизы программного кода.

Интеллектуальный манипулёж.
 git difftool -- смотр изменений продвинутым образом.
 git mergetool -- слияние интеллектуальное.
 git bisect    -- поиск бага методом деления списка ревизий пополам.

Типичная последовательность действий (в UNIX среде), для добавления нового
задания в репозиторий и отсылки на сервер в origin следующая:
1. в подкаталоге репозитоия создаём каталог в стиле task-xxxxx.
   # если не в каталоге, куда склонировался репозиторий.
   # имя каталога может отличаться от repos
   cd repos 
   #
   # coздаём подкаталог, вместо xxxxx нужно написать актуальное имя задания.
   mkdir task_xxxxxx
2. В него помещаем исходные файлы с заданием.
3. Переходим в каталог task_xxxxx (команда сd)
   и выполняем git add имя_файла_с_исходным_кодом1 имя_файла_с_исходным_кодом2 
   вместо имя_файла_с_исходным_кодом написать актуальное имя файла,
   и так для всех исходных файлов реализующих задание.
   Не нужно добавлять файлы, которые были получены с помощью
   компилятора, и прочие файлы, которые автоматически генерятся по файлам с исходным кодом.
4. Пофиксировать изменения. В этом случае достаточно написать:
   git commit
   запустится текстовый редактор, обычно vim в котором нужно будет написать текст,
   который описывает суть вносимых в репозиторий изменений.
   Если с текстовым редактором возиться не охота, можно написать примерно так:
   git commit -m "Текст описывающий суть фиксируемого изменения"
   В дальнейшем нужно будет писать либо git commit -a, для фиксации ВСЕХ локальных
   изменений, либо указывать конкретный файл, для которого фиксируется изменение.
5. Отправляем изменение на сервер.
   Здесь обычно достаточно выполнить команду git push без каких либо дополнительных параметров.
6. Во всех сомнительных ситуациях посмотреть состояние репозитория можно посмотреть при помощи 
   команды git status.   



Прочая информация есть по вот этим ресурсам:
https://github.com/andreiled/mipt-cs-4sem/wiki/%D0%9F%D0%BE%D1%88%D0%B0%D0%B3%D0%BE%D0%B2%D0%B0%D1%8F-%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B5-%D1%81-git-%D0%B8-github-%D0%B4%D0%BB%D1%8F-%D1%81%D1%82%D1%83%D0%B4%D0%B5%D0%BD%D1%82%D0%BE%D0%B2

https://github.com/progit/progit2-ru/releases


Ваш Алексей Сальников.

